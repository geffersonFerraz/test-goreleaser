project_name: mgccli
builds:
  - env: [CGO_ENABLED=0]
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
nfpms:
- maintainer: Carlos A Becker <root@carlosbecker.dev>
  description: Sample project.
  homepage: https://github.com/geffersonFerraz/test-goreleaser
  license: MIT
  formats:
  - deb
  - rpm
brews:
-
  # Name of the recipe
  #
  # Default: ProjectName
  # Templates: allowed
  name: mgccli
  # Alternative names for the current recipe.
  #
  # Useful if you want to publish a versioned formula as well, so users can
  # more easily downgrade.
  #
  # Since: v1.20 (pro)
  # Templates: allowed
  alternative_names:
    - mgccli@{{ .Version }}
    - mgccli@{{ .Major }}
  # IDs of the archives to use.
  # Empty means all IDs.
  ids:
  - mgccli
  # Sets the app file within a DMG.
  #
  # Since: 1.24 (pro)
  app: mgccli.app
  # GOARM to specify which 32-bit arm version to use if there are multiple
  # versions from the build section. Brew formulas support only one 32-bit
  # version.
  #
  # Default: 6
  goarm: 6
  # GOAMD64 to specify which amd64 version to use if there are multiple
  # versions from the build section.
  #
  # Default: v1
  goamd64: v1
  # NOTE: make sure the url_template, the token and given repo (github or
  # gitlab) owner and name are from the same kind.
  # We will probably unify this in the next major version like it is
  # done with scoop.
  # URL which is determined by the given Token (github, gitlab or gitea).
  #
  # Default depends on the client.
  # Templates: allowed
  url_template: "https://github.com/geffersonFerraz/test-goreleaser/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
  # Headers to include in the `url` stanza.
  # This can be a more modern alternative to `download_strategy` in some
  # cases.
  #
  # Since: v1.25
  url_headers:
    - "Accept: application/octet-stream"
    - 'Authorization: bearer #{ENV["secrets.GH_PAT"]}'
  # Allows you to set a custom download strategy. Note that you'll need
  # to implement the strategy and add it to your tap repository.
  # Example: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
  download_strategy: CurlDownloadStrategy
  # Allows you to add a custom require_relative at the top of the formula
  # template.
  custom_require: custom_download_strategy
  # Git author used to commit to the repository.
  commit_author:
    name: goreleaserbot
    email: bot@goreleaser.com
  # The project name and current git tag are used in the format string.
  #
  # Templates: allowed
  commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"
  # Folder inside the repository to put the formula.
  folder: Formula
  # Caveats for the user of your binary.
  caveats: "How to use this binary"
  # Your app's homepage.
  homepage: "https://example.com/"
  # Your app's description.
  #
  # Templates: allowed
  description: "Software to create fast and easy drum rolls."
  # SPDX identifier of your app's license.
  license: "MIT"
  # Setting this will prevent goreleaser to actually try to commit the updated
  # formula - instead, the formula file will be stored on the dist folder only,
  # leaving the responsibility of publishing it to the user.
  # If set to auto, the release will not be uploaded to the homebrew tap
  # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
  #
  # Templates: allowed
  skip_upload: true
  # Custom block for brew.
  # Can be used to specify alternate downloads for devel or head releases.
  custom_block: |
    head "https://github.com/some/package.git"
    ...
  # Packages your package depends on.
  dependencies:
    - name: git
      # Allow to specify the OS in which the dependency is required.
      # Valid options are `mac` and `linux`.
      #
      # Since: v1.23.0
      os: mac
    - name: zsh
      type: optional
    - name: fish
      version: v1.2.3
    # if providing both version and type, only the type will be taken into
    # account.
    - name: elvish
      type: optional
      version: v1.2.3
  # Specify for packages that run as a service.
  plist: |
    <?xml version="1.0" encoding="UTF-8"?>
    # ...
  # Service block.
  #
  # Since: v1.7
  service: |
    run: mgccli
    # ...
  # So you can `brew test` your formula.
  #
  # Template: allowed
  test: |
    system "#{bin}/foo --version"
    # ...
  # Additional install instructions so you don't need to override `install`.
  #
  # Template: allowed
  # Since: v1.20
  # extra_install: |
  #   bash_completion.install "completions/foo.bash" => "foo"
  #   man1.install "man/foo.1.gz"
  #   # ...
  # Custom post_install script for brew.
  # Could be used to do any additional work after the "install" script
  # post_install: |
  #     etc.install "app-config.conf"
  #   # ...
  # Repository to push the generated files to.
  repository:
    # Repository owner.
    #
    # Templates: allowed
    owner: geffersonFerraz
    # Repository name.
    #
    # Templates: allowed
    name: homebrew-test
    # Optionally a branch can be provided.
    #
    # Default: default repository branch
    # Templates: allowed
    branch: main
    # Optionally a token can be provided, if it differs from the token
    # provided to GoReleaser
    # Templates: allowed
    # token: "{{ .Env.GITHUB_PERSONAL_AUTH_TOKEN }}"
    # Sets up pull request creation instead of just pushing to the given branch.
    # Make sure the 'branch' property is different from base before enabling
    # it.
    #
    # Since: v1.17
    pull_request:
      # Whether to enable it or not.
      enabled: true
      # Whether to open the PR as a draft or not.
      #
      # Since: v1.19
      draft: not
      # If the pull request template has checkboxes, enabling this will
      # check all of them.
      #
      # This feature is only available in GoReleaser Pro.
      # Since: v1.20 (pro)
      # check_boxes: not
      # Base can also be another repository, in which case the owner and name
      # above will be used as HEAD, allowing cross-repository pull requests.
      #
      # Since: v1.19
      base:
        owner: geffersonFerraz
        name: test-goreleaser
        branch: main
    # Clone, create the file, commit and push, to a regular Git repository.
    #
    # Notice that this will only have any effect if the given URL is not
    # empty.
    #
    # Since: v1.18
    # git:
    #   # The Git URL to push.
    #   #
    #   # Templates: allowed
    #   url: 'ssh://git@myserver.com:repo.git'
    #   # The SSH private key that should be used to commit to the Git
    #   # repository.
    #   # This can either be a path or the key contents.
    #   #
    #   # IMPORTANT: the key must not be password-protected.
    #   #
    #   # WARNING: do not expose your private key in the configuration file!
    #   #
    #   # Templates: allowed
    #   private_key: '{{ .Env.PRIVATE_KEY_PATH }}'
    #   # The value to be passed to `GIT_SSH_COMMAND`.
    #   # This is mainly used to specify the SSH private key used to pull/push
    #   # to the Git URL.
    #   #
    #   # Default: 'ssh -i {{ .KeyPath }} -o StrictHostKeyChecking=accept-new -F /dev/null'
    #   # Templates: allowed
    #   ssh_command: 'ssh -i {{ .Env.KEY }} -o SomeOption=yes'